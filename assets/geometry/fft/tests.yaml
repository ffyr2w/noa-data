transform2D:
  inputs:
    # There's a bug/limitation in the C++ implementation for non-redundant FFTs.
    # The workaround is to low-pass filter the real-valued Nyquist on even sizes.
    - name: &input2D_0 tmp_transform2D_input_00.mrc
      shape: [ 1,1,256,256 ]
    - name: &input2D_1 tmp_transform2D_input_01.mrc
      shape: [ 1,1,255,395 ]

  tests: # scale, rotate, then shift
    # squares
    0:
      input: *input2D_0
      expected: tmp_transform2D_00.mrc
      scale: [ 0.9,1.1 ]
      rotate: 10 # deg
      center: [ 128,128 ]
      shift: [ 0,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    1:
      input: *input2D_0
      expected: tmp_transform2D_01.mrc
      scale: [ 1,1 ]
      rotate: 45 # deg
      center: [ 128,128 ]
      shift: [ -15,15 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    2:
      input: *input2D_0
      expected: tmp_transform2D_02.mrc
      scale: [ 1,1.5 ]
      rotate: -45 # deg
      center: [ 98,98 ]
      shift: [ 0,30 ]
      cutoff: 0.5
      interp: INTERP_LINEAR

    # rectangles
    3:
      input: *input2D_1
      expected: tmp_transform2D_10.mrc
      scale: [ 0.9,1.1 ]
      rotate: 30 # deg
      center: [ 127,197 ]
      shift: [ 0,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    4:
      input: *input2D_1
      expected: tmp_transform2D_11.mrc
      scale: [ 1,1 ]
      rotate: 45 # deg
      center: [ 127,197 ]
      shift: [ -30,30 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    5:
      input: *input2D_1
      expected: tmp_transform2D_12.mrc
      scale: [ 1,1.5 ]
      rotate: -45 # deg
      center: [ 97,180 ]
      shift: [ 0,30 ]
      cutoff: 0.5
      interp: INTERP_LINEAR

transform3D:
  inputs:
    - name: &input3D_0 tmp_transform3D_input_00.mrc
      shape: [ 1,160,160,160 ]
    - name: &input3D_1 tmp_transform3D_input_01.mrc
      shape: [ 1,161,160,321 ]

  tests: # scale, rotate, then shift
    0:
      input: *input3D_0
      expected: tmp_transform3D_00.mrc
      scale: [ 1,1,1 ]
      rotate: [ 30,0,0 ] # ZYZ intrinsic deg
      center: [ 80,80,80 ]
      shift: [ 0,0,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    1:
      input: *input3D_0
      expected: tmp_transform3D_01.mrc
      scale: [ 1,1,1 ]
      rotate: [ 45,0,0 ] # ZYZ intrinsic deg
      center: [ 80,80,80 ]
      shift: [ 0,11.5,-20 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    2:
      input: *input3D_0
      expected: tmp_transform3D_02.mrc
      scale: [ 0.8,1,1 ]
      rotate: [ -30,0,0 ] # ZYZ intrinsic deg
      center: [ 65,65,65 ]
      shift: [ -20,20,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR

    3:
      input: *input3D_1
      expected: tmp_transform3D_10.mrc
      scale: [ 1,1,1 ]
      rotate: [ 30,0,0 ] # ZYZ intrinsic deg
      center: [ 80,80,160 ]
      shift: [ 0,0,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    4:
      input: *input3D_1
      expected: tmp_transform3D_11.mrc
      scale: [ 1,1,1 ]
      rotate: [ 45,0,0 ] # ZYZ intrinsic deg
      center: [ 80,80,160 ]
      shift: [ -40,20,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR
    5:
      input: *input3D_1
      expected: tmp_transform3D_12.mrc
      scale: [ 1.5,1,1 ]
      rotate: [ -30,0,0 ] # ZYZ intrinsic deg
      center: [ 65,65,128 ]
      shift: [ 0,25,0 ]
      cutoff: 0.5
      interp: INTERP_LINEAR

insert3D_rasterisation:
  tests:
    0:
      slice_shape: [ 5,1,128,128 ]
      grid_shape: [ 1,100,256,256 ]
      target_shape: [ 1,256,256,256 ]
      scale: 1
      rotate: [ 0,3,-3,6,-6 ] # tilt Y
      cutoff: 0.5
      ews_radius: 0
      grid_filename: insert3D_rasterisation_grid0.mrc
    1:
      slice_shape: [ 10,1,128,128 ]
      grid_shape: [ 1,128,128,128 ]
      target_shape: [ 0,256,256,256 ]
      scale: 1
      rotate: [ 0,2,4,6,8,10,12,14,16,18 ] # tilt Y
      cutoff: 0.4
      ews_radius: 0
      grid_filename: insert3D_rasterisation_grid1.mrc
    2:
      slice_shape: [ 1,1,512,512 ]
      grid_shape: [ 1,10,512,512 ]
      target_shape: [ 1,512,512,512 ]
      scale: 1
      rotate: [ 0 ] # tilt Y
      cutoff: 0.5
      ews_radius: 50 # 1/0.02
      grid_filename: insert3D_rasterisation_grid2.mrc

insert3D_interpolation:
  tests:
    0:
      slice_shape: [ 5,1,128,128 ]
      grid_shape: [ 1,100,256,256 ]
      target_shape: [ 1,256,256,256 ]
      scale: 1
      rotate: [ 0,3,-3,6,-6 ] # tilt Y
      cutoff: 0.5
      ews_radius: 0
      slice_z_radius: 0.02
      grid_filename: insert3D_interp_grid0.mrc
    1:
      slice_shape: [ 10,1,128,128 ]
      grid_shape: [ 1,128,128,128 ]
      target_shape: [ 0,256,256,256 ]
      scale: 1
      rotate: [ 0,2,4,6,8,10,12,14,16,18 ] # tilt Y
      cutoff: 0.4
      ews_radius: 0
      slice_z_radius: 0.003
      grid_filename: insert3D_interp_grid1.mrc
    2:
      slice_shape: [ 1,1,512,512 ]
      grid_shape: [ 1,10,512,512 ]
      target_shape: [ 1,512,512,512 ]
      scale: 1
      rotate: [ 0 ] # tilt Y
      cutoff: 0.5
      ews_radius: 50 # 1/0.02
      slice_z_radius: 0.003
      grid_filename: insert3D_interp_grid2.mrc

extract3D_from_grid:
  grid_shape: [ 1,128,128,128 ]
  grid_filename: extract3D_input_grid.mrc
  tests:
    0:
      slice_shape: [ 9,1,128,128 ]
      scale: 1
      rotate: [ -60,-40,-20,-10,0,10,20,40,60 ] # tilt Y
      cutoff: 0.5
      ews_radius: 0
      slice_filename: extract3D_slice0.mrc
    1:
      slice_shape: [ 9,1,64,64 ]
      scale: 1
      rotate: [ -60,-40,-20,-10,0,10,20,40,60 ] # tilt Y
      cutoff: 0.5
      ews_radius: 0
      slice_filename: extract3D_slice1.mrc

extract3D_from_slices:
  tests:
    0:
      input_slice_shape: [ 4,1,512,512 ]
      output_slice_shape: [ 3,1,512,512 ]
      input_rotate: [ -6,-3,3,6 ] # tilt Y
      output_rotate: [ -9, 0, 9 ] # tilt Y
      cutoff: 0.5
      ews_radius: 0
      slice_z_radius: 0.005
      output_slice_filename: extract3D_slice2.mrc
